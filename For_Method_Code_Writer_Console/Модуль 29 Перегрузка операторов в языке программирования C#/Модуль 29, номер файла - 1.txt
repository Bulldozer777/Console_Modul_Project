Наряду с методами мы можем также перегружать операторы. Например, пусть у нас есть следующий класс Counter:

class Counter
{
    public int Value { get; set; }
}

Данный класс представляет некоторый счетчик, 
значение которого хранится в свойстве Value.
И допустим, у нас есть два объекта класса Counter - два счетчика, 
которые мы хотим сравнивать или складывать на основании их свойства Value, 
используя стандартные операции сравнения и сложения:

Counter c1 = new Counter { Value = 23 };
Counter c2 = new Counter { Value = 45 };
 
bool result = c1 > c2;
Counter c3 = c1 + c2;

Но на данный момент ни операция сравнения, 
ни операция сложения для объектов Counter не доступны. 
Эти операции могут использоваться для ряда примитивных типов. 
Например, по умолчанию мы можем складывать числовые значения, 
но как складывать объекты комплексных типов - 
классов и структур компилятор не знает.
И для этого нам надо выполнить перегрузку нужных нам операторов.
Перегрузка операторов заключается в определении в классе, 
для объектов которого мы хотим определить оператор, 
специального метода:

public static возвращаемый_тип operator оператор(параметры)
{  }

Этот метод должен иметь модификаторы public static,
так как перегружаемый оператор будет использоваться 
для всех объектов данного класса. Далее идет название
возвращаемого типа. Возвращаемый тип представляет тот тип,
объекты которого мы хотим получить. К примеру, в результате
сложения двух объектов Counter мы ожидаем получить новый объект
Counter. А в результате сравнения двух мы хотим получить объект 
типа bool, который указывает истинно ли условное выражение или
ложно. Но в зависимости от задачи возвращаемые типы могут быть любыми.